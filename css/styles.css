/* Щоб застосовувати один тег для всіх кольорів одного типу одночасно */
:root {
  --color-brand: #819b57;
  --color-brand-dark: #465929;
  --color-primary-light: #faf4ea;
  --color-primary-dark: #31261a;
}

/* Зверху завжди йдуть глобальні стилі */

/* Прибрати кружки біля списків */
body {
  color: var(--color-primary-dark);
}

ul {
  list-style-type: none;
}

/* Стилі кнопок */
.button {
  color: var(--color-primary-light);
  background-color: var(--color-brand);
  border: 2px solid var(--color-brand);
  border-radius: 8px;
  cursor: pointer;
}

.button:hover {
  color: var(--color-brand-dark);
  background-color: transparent;
}

/* Стилі посилань */
.link {
  color: var(--color-primary-light);
}

.link:hover {
  color: var(--color-brand);
}

/* Стилі тексту головного титулу */
.hero-title {
  color: var(--color-primary-light);
}

.hero-title .accent {
  color: var(--color-brand); /* Спосіб завдання занчення наз. hex */
}

.advanteges-list {
  color: var(--color-primary-light);
  background-color: var(--color-brand);
}

.section-title .accent {
  color: var(--color-primary-dark);
}

/* 
Селектор класу(Використовується найчастіше у css): 

html:   class="test" 
css:    .test {}

Селектор ідентифікатора(Використовується найчастіше з якорями та js):

html:   id="test"
css:    #test {}

Селектор атрибуту(): 

css: [type] {}  -- Звернутися до будь-якого атрибуту (до всіх)
css: [type="buttom"] {}  -- Звернутися до атребуту зі значенням
Так робити не рекомендується. 

Якщо до кнопки доданий атрибут disables [Якщо кнопка відключена] можна зробити стилі для двух окремих станів:

css:    .button {} --  Для активної кнопки
css:    .button[disabled] {}  --  Для вимкненої кнопки
*/

/* 
Псевдокласи стану - задати стилі інтерактивним елементам за певної дії:
-> hover (наведення курсору)
-> focus (фокусування з миші/клавіатури) - Застосовується для полів вводу або стилі з клавіатури
-> active (клік) - В момент кліку
*/

/* 
Каскадність - механізм, який керує кінцевими значеннями властивості 
елемента якщо до нього застосовується кілька css-правил.
-> Якщо до елемента застосовується кілька правил, їх властивості комбінуються
-> Якщо правила містять однакові властивості з різними значеннями, то вони конфліктують
Браузер вибирає останнє правило. 
css: .test {color: blue;} .test {color: red} - вибере red.
*/

/* Наслідування - значення певних властивостей передаються від предка його нащадкам 
-> Не потрібно створювати стилі для кожного окремо
-> Наслідуються властивості оформлення тексту
    <section class="test-class">  -> Батько -> Якщо задамо властивості батьку то нащадки їх теж отримують
      <h1> test <h1>              -> Нащадок -> Наслідуються тільки властивості тексту (колір, шрифт і тд.)
    <section>
*/

/*
 css - змінні (кастомні властивості) - це контейнери для значень, створені з метою повторного використання.
 */
